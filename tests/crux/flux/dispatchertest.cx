import test(...)
import assert
import flux.dispatcher

data ActionType {
  Test1,
  Test2,
}

// TODO: need deriving(Eq)
impl Eq ActionType {
  eq = (lhs, rhs) => {
    match (lhs, rhs) {
      (Test1, Test1) => True
      (Test2, Test2) => True
      _ => False
    }
  }
}

let _ = test("actions are dispatched to registered callbacks", fun() {
  let actions = mutable []

  let d = dispatcher.new()
  let _ = d->register(action => {
    actions->append(action)
  })

  d->dispatch(Test1)
  d->dispatch(Test2)

  assert.equal([Test1, Test2], actions->freeze())
})

let _ = test("callbacks can be unregistered", fun() {
  let actions = mutable []

  let d = dispatcher.new()
  let token = d->register(action => {
    actions->append(action)
  })

  d->unregister(token)

  d->dispatch(10)
  assert.equal([], actions->freeze())
})
