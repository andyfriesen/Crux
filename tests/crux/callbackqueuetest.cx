import test(...)
import assert

import callbackqueue(CallbackQueue)

test("runs callback", () => {
  let result = mutable []

  let cbs = CallbackQueue::new()
  cbs->add(() => {
    result->append("hello")
  })

  cbs->run()
  assert.equal(mutable ["hello"], result)

  cbs->run()
  assert.equal(mutable ["hello"], result)
})

test("runs all callbacks", () => {
  let result = mutable []

  let cbs = CallbackQueue::new()
  cbs->add(() => {
    result->append("hello")
  })

  cbs->add(() => {
    result->append("goodbye")
  })

  cbs->run()

  assert.equal(["goodbye", "hello"], sorted(result->freeze()))
})

test("clear", () => {
  let cbs = CallbackQueue::new()
  cbs->add(() => {
    assert.fail("should not get here")
  })
  cbs->clear()
  cbs->run()
})

exception Boom String

test("exception in callback prevents previous callbacks from running again", () => {
  let result = mutable []
  let cbs = CallbackQueue::new()
  cbs->add(() => {
    result->append("one")
  })
  cbs->add(() => {
    throw Boom "two"
  })
  cbs->add(() => {
    result->append("three")
  })

  try {
    cbs->run()
    assert.fail("failed to throw")
  }
  catch Boom value {
    assert.equal("two", value)
  }
  assert.equal(mutable ["one"], result)

  cbs->run()
  assert.equal(mutable ["one", "three"], result)
})

// possible exception modes:
//   exception stops execution, leaves queue empty
//   exception stops execution, leaves queue full
//   exception stops execution, next runAndClear() runs remainder
//   exception is caught, remainder runs, rethrown
//   exception is caught, remainder runs, not thrown
