import test(...)
import assert

test("array length", () => {
  assert.equal(0, len([]))
  assert.equal(1, len([5]))
  assert.equal(2, len(["hi", "bye"]))
})

test("mutable array length", () => {
  assert.equal(0, len(mutable []))
  assert.equal(1, len(mutable [5]))
  assert.equal(2, len(mutable ["hi", "bye"]))
})

test("array equality", () => {
  assert.equal([1, 2], [1, 2])
  assert.notEqual([1, 2], [3, 4])
})

test("mutable array equality", () => {
  assert.equal(mutable [1, 2], mutable [1, 2])
  assert.notEqual(mutable [1, 2], mutable [3, 4])
})

test("sorted", () => {
  assert.equal([0, 1, 2], sorted([1, 2, 0]))
})

test("sorted doesn't change original array", () => {
  let a = [2, 1, 0]
  let b = sorted(a)
  assert.equal([2, 1, 0], a)
})

data D<a>(a)

impl Eq D<a: Eq> {
  eq(D(x), D(y)) { x == y }
}

impl Ordered D<a: Ordered> {
  lt(D(x), D(y)) { y < x }
}

test("sorted uses Ordered", () => {
  let a = [D(1), D(5), D(3), D(0)]
  assert.equal([D(5), D(3), D(1), D(0)], sorted(a))
})

test("array length", () => {
  assert.equal(3, len([1, 2, 3]))
})

test("in-place sort with comparator", () => {
  let a = mutable [(1, 3), (2, 4), (1, 2), (3, 0-1)]
  a->sort()
  assert.equal([(1, 2), (1, 3), (2, 4), (3, 0-1)], a->freeze())
})
