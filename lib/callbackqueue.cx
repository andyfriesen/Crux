data CallbackQueue({
  mutable next: Number,
  entries: mutable [()],
})

export fun new() {
  return CallbackQueue({
    mutable next: 0,
    entries: mutable [],
  })
}

export fun add1<Env>(CallbackQueue(this), env: Env, cb: Env => ()) {
  this.entries->append(_unsafe_coerce(env))
  this.entries->append(_unsafe_coerce(cb))
}

fun run0(env) {
  env()
}

export fun add(cbset, cb) {
  add1(cbset, cb, run0)
}

export fun run(CallbackQueue(this)) {
  let entries = this.entries
  let mutable i = this.next
  while i < len(entries) {
    let env = _unsafe_coerce(entries->get(i))
    let cb = _unsafe_coerce(entries->get(i + 1))
    i = i + 2
    this.next = i
    cb(env)
  }
  this.next = 0
  entries->clear()
}

export fun clear(CallbackQueue(this)) {
  this.next = 0
  this.entries->clear()
}
