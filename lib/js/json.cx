import js
import dict

data Error {
    Error(String)
}

export data Value {}

let _typeOf: Value => String = _unsafe_js("function (x) { return typeof x; }")
let _throw<a>: Error => a = _unsafe_js("function (e) { throw e; }")
let _isNull: Value => Boolean = _unsafe_js("function (o) { return o === null; }")
let _getAttr<a>: (Value, String) => a = _unsafe_js("function (o, k) { return o[k]; }")
let _parseJson: String => Value = _unsafe_js("function (s) { return JSON.parse(s); }")

let _isArray = _unsafe_js("function (a) { return Array.isArray(a); }")

let _stringify = _unsafe_js("function (o) { return JSON.stringify(o); }")

fun assert(b: Boolean, error: String) {
    if not(b) {
        _throw(Error(error))
    }
}

fun assertTypeOf(a: Value, expectedType: String) {
    let t = _typeOf(a);
    if expectedType != t {
        _throw(Error("Wanted " + expectedType + " but got " + t + ": " + _stringify(a)))
    }
}

export fun decodeNumber(a: Value): Number {
    assertTypeOf(a, "number")
    return _unsafe_coerce(a)
}

export fun decodeBoolean(a: Value): Boolean {
    assertTypeOf(a, "boolean")
    return _unsafe_coerce(a)
}

export fun decodeString(a: Value): String {
    assertTypeOf(a, "string")
    return _unsafe_coerce(a)
}

export fun decodeNullable<a>(decoder: Value => a): Value => ?a {
    fun(a) {
        if (_isNull(a)) {
            return None
        } else {
            return Some(decoder(a))
        }
    }
}

export fun decodeArray<element>(
    elementDecoder: Value => element
): Value => [element] {
    fun (arr) {
        assert(_isArray(arr), "Expected array but got " + _stringify(arr))

        let result = mutable [];
        for element in _unsafe_coerce(arr) {
            result->append(elementDecoder(element))
        }
        result->freeze()
    }
}

export fun decodeKey<element>(
    keyDecoder: Value => element,
    obj: Value,
    key: String
): element {
    assertTypeOf(obj, "object")
    return keyDecoder(_getAttr(obj, key))
}

export fun fromString<a>(s: String, decoder: Value => a): a {
    decoder(_parseJson(s))
}

// Encoder

let nullJSValue: Value = _unsafe_js("null")

export let renderJSON: Value => String = _unsafe_js("JSON.stringify")

export trait ToJSON {
    toJSON: self => Value
}

impl ToJSON Value {
  toJSON(v) { v }
}

impl ToJSON Array<a: ToJSON> {
  toJSON = array => _unsafe_coerce(array->map(toJSON))
}

impl ToJSON String {
  toJSON = str => _unsafe_coerce(str)
}

impl ToJSON Number {
  toJSON = num => _unsafe_coerce(num)
}

impl ToJSON Boolean {
  toJSON = b => _unsafe_coerce(b)
}

impl ToJSON js.Null {
  toJSON = _ => nullJSValue
}

impl ToJSON dict.Dict<V: ToJSON> {
  toJSON = d => _unsafe_coerce(d->map(toJSON))
}

impl ToJSON Option<T: ToJSON> {
  toJSON(v) {
    match v {
      None => nullJSValue
      Some(x) => toJSON(x)
    }
  }
}

impl ToJSON {...} {
  for fieldValue { toJSON(fieldValue) }

  toJSON(rec) {
    toJSON(dict.from(fieldMap(rec)))
  }
}

export fun encode<V: ToJSON>(value: V): String {
    renderJSON(toJSON(value))
}
