pragma { NoBuiltin }

import types(Boolean)

// TODO: move String into types module

export let typeof<a, TODOString>: a => TODOString = _unsafe_js(
  "function typeof_(x) { return typeof x; }"
)

export let not<a>: a => Boolean = _unsafe_js(
  "function not(b) { return !b; }"
)

export let truthy<a>: a => Boolean = _unsafe_js(
  "function truthy(b) { return !!b; }"
)

export let eq<a, b>: (a, b) => Boolean = _unsafe_js(
  "function eq(lhs, rhs) { return lhs === rhs; }"
)

export let neq<a, b>: (a, b) => Boolean = _unsafe_js(
  "function neq(lhs, rhs) { return lhs !== rhs; }"
)

export let lt<a, b>: (a, b) => Boolean = _unsafe_js(
  "function lt(lhs, rhs) { return lhs < rhs; }"
)

export let lte<a, b>: (a, b) => Boolean = _unsafe_js(
  "function lte(lhs, rhs) { return lhs <= rhs; }"
)

export let gt<a, b>: (a, b) => Boolean = _unsafe_js(
  "function gt(lhs, rhs) { return lhs > rhs; }"
)

export let gte<a, b>: (a, b) => Boolean = _unsafe_js(
  "function gte(lhs, rhs) { return lhs >= rhs; }"
)
