pragma { NoBuiltin }

import boolean
import number(Number)
import length
import cmp

export data Array<a> {}

let _unsafe_new<a>: fun(Number) -> [a] =
    _unsafe_js("function (len) { return new Array(len); }")

let _unsafe_set = _unsafe_js("function (arr, idx, el) { arr[idx] = el; }")
let _unsafe_get = _unsafe_js("function (arr, idx) { return arr[idx]; }")

export fun get<t>(a: [t], idx: Number): t {
    _unsafe_get(a, idx)
}

impl length.HasLength Array<a> {
  len(a) {
    _unsafe_coerce(a).length
  }
}

impl cmp.Eq Array<a: cmp.Eq> {
  eq(lhs, rhs) {
    let lhs_length = length.len(lhs)
    let rhs_length = length.len(rhs)
    if lhs_length != rhs_length {
      return boolean.False
    }

    let mutable i = 0
    while i < lhs_length {
      if get(lhs, i) != get(rhs, i) {
        return boolean.False
      }
      i = i + 1
    }

    boolean.True
  }
}

export fun replicate<a>(element: a, n: Number): [a] {
    let arr = _unsafe_new(n);

    let mutable i = 0;
    while i < n {
        _unsafe_set(arr, i, element)
        i = i + 1
    };

    arr
}

export fun each<a, b>(arr: [a], f: fun(a) -> b): () {
    let mutable i = 0
    let n = length.len(arr)
    while i < n {
        f(_unsafe_get(arr, i))
        i = i + 1
    }
}

export fun sliceFrom<a>(arr: [a], start: Number): [a] {
    _unsafe_coerce(arr).slice(start)
}

export fun sliceTo<a>(arr: [a], end: Number): [a] {
    _unsafe_coerce(arr).slice(0, end)
}

export fun slice<a>(arr: [a], start: Number, end: Number): [a] {
    _unsafe_coerce(arr).slice(start, end)
}
