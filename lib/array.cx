pragma { NoBuiltin }

import {
    number
}

// TODO: implement selective import
type Number = number.Number

export data Array a {}

let _unsafe_new{a}: fun(Number) -> [a] =
    _unsafe_js("function (len) { return new Array(len); }")

let _unsafe_set = _unsafe_js("function (arr, idx, el) { arr[idx] = el; }")
let _unsafe_get = _unsafe_js("function (arr, idx) { return arr[idx]; }")

export fun get{t}(a: [t], idx: Number) {
    _unsafe_get(a, idx)
}

export fun len{a}(a: [a]): Number {
    _unsafe_coerce(a).length
}

export fun replicate{a}(element: a, length: Number): [a] {
    let arr = _unsafe_new(length);

    let mutable i = 0;
    while i < length {
        _unsafe_set(arr, i, element)
        i = i + 1
    };

    arr
}

export fun each{a, b}(arr: [a], f: fun(a) -> b): () {
    let mutable i = 0
    let length = len(arr)
    while i < length {
        f(_unsafe_get(arr, i))
        i = i + 1
    }
}

export fun sliceFrom{a}(arr: [a], start: Number): [a] {
    _unsafe_coerce(arr).slice(start)
}

export fun sliceTo{a}(arr: [a], end: Number): [a] {
    _unsafe_coerce(arr).slice(0, end)
}

export fun slice{a}(arr: [a], start: Number, end: Number): [a] {
    _unsafe_coerce(arr).slice(start, end)
}
