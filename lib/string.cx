pragma { NoBuiltin }

import {
    cmp(...)
    boolean(...)
    array
    number
    length
}

// TODO: implement selective import
type Number = number.Number

export data String {}

impl Eq String {
  eq = _unsafe_js("function eq(x, y) { return x === y; }")
}

impl length.HasLength String {
  len(s) {
    _unsafe_coerce(s).length
  }
}

export fun startsWith(haystack: String, needle: String) {
    let h = _unsafe_coerce(haystack)
    let n = _unsafe_coerce(needle)
    if n.length > h.length {
        return False
    }
    return h.indexOf(n, 0) == 0
}

export fun endsWith(haystack: String, needle: String) {
    // Oops, how do I use a record with a keyword property name :D
    // return _unsafe_coerce(haystack).match(needle + "$") == needle;

    let h = _unsafe_coerce(haystack)
    let n = _unsafe_coerce(needle)
    if n.length > h.length {
        return False
    }
    // TODO: crux does not support negative literals yet
    return h.indexOf(n, h.length - n.length) != 0 - 1
}

export fun join(sep: String, elements: [String]): String {
    _unsafe_coerce(elements).join(sep)
}

export fun sliceFrom(s: String, start: Number) {
    return _unsafe_coerce(s).slice(start)
}

export fun trim(s: String) {
    // TODO: tests for full unicode whitespace support
    _unsafe_coerce(s).trim()
}
