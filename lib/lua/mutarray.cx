pragma { NoBuiltin }

import array
import cmp
import string
import number(Number)
import length
import types(Boolean, True, False)

export data MutableArray<a> {}

let _unsafe_new<a>: fun(Number) -> mutable [a] =
    _unsafe_js("function (len) local a = {} for i = 0, len do a[i] = 0 end return a end")

let _unsafe_set = _unsafe_js("function (arr, idx, el) arr[idx] = el end")
let _unsafe_get = _unsafe_js("function (arr, idx) return arr[idx] end")

export fun append<a>(a: mutable [a], v: a): () {
    _unsafe_coerce(a).push(v)
}

export fun get<a>(a: mutable [a], idx: Number): a {
    _unsafe_get(a, idx)
}

// TODO: sugar
impl length.HasLength MutableArray<a> {
  len(arr) {
    return _unsafe_coerce(arr).length
  }
}

impl cmp.Eq MutableArray<a: cmp.Eq> {
  eq(lhs, rhs) {
    let lhs_length = length.len(lhs)
    let rhs_length = length.len(rhs)
    if lhs_length != rhs_length {
      return False
    }

    let mutable i = 0
    while i < lhs_length {
      if lhs->get(i) != rhs->get(i) {
        return False
      }
      i = i + 1
    }

    return True
  }
}

export fun replicate<a>(element: a, n: Number): mutable [a] {
    let arr = _unsafe_new(n);

    let mutable i = 0;
    while i < n {
        _unsafe_set(arr, i, element)
        i = i + 1
    };

    arr
}

export fun each<a, b>(arr: mutable [a], f: fun(a) -> b): () {
    let mutable i = 0
    let n = length.len(arr)
    while i < n {
        f(_unsafe_get(arr, i))
        i = i + 1
    }
}

export fun sliceFrom<a>(arr: mutable [a], start: Number): mutable [a] {
    _unsafe_coerce(arr).slice(start)
}

export fun sliceTo<a>(arr: mutable [a], end: Number): mutable [a] {
    _unsafe_coerce(arr).slice(0 as Number, end)
}

export fun slice<a>(arr: mutable [a], start: Number, end: Number): mutable [a] {
    _unsafe_coerce(arr).slice(start, end)
}

export fun freeze<a>(arr: mutable [a]): [a] {
    _unsafe_coerce(arr).slice()
}

export fun unsafeFreeze<a>(arr: mutable [a]): [a] {
  _unsafe_coerce(arr)
}

// TODO: add comparator support
export fun sort<T: cmp.Ordered+cmp.Eq>(arr: mutable [T]) {
  _unsafe_coerce(arr).sort(fun(lhs: T, rhs: T): Number {
    if lhs < rhs {
      return -1
    } else if lhs > rhs {
      return 1
    } else {
      return 0
    }
  })
}

export fun filter<a>(arr: mutable [a], pred: a => Boolean): mutable [a] {
  _unsafe_coerce(arr).filter(pred)
}

export fun clear<T>(arr: mutable [T]) {
  _unsafe_coerce(arr).length = 0 as Number
}
