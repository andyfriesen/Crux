pragma { NoBuiltin }

import { array }

export data MutableArray a {}

let _unsafe_new: (Number) -> MutableArray a =
    _unsafe_js("function (len) { return new Array(len); }")

let _unsafe_set = _unsafe_js("function (arr, idx, el) { arr[idx] = el; }")
let _unsafe_get = _unsafe_js("function (arr, idx) { return arr[idx]; }")

export fun append(a: MutableArray a, v: a): () {
    _unsafe_coerce(a).push(v)
}

export fun get(a: MutableArray a, idx: number) {
    _unsafe_get(a, idx)
}

export fun len(a: MutableArray a): Number {
    _unsafe_coerce(a).length
}

export fun replicate(element: a, len: Number): MutableArray a {
    let arr = _unsafe_new(len);

    let mutable i = 0;
    while i < len {
        _unsafe_set(arr, i, element)
        i = i + 1
    };

    arr
}

export fun each(arr: MutableArray a, f: (a) -> b): () {
    let mutable i = 0
    let length = len(arr)
    while i < length {
        f(_unsafe_get(arr, i))
        i = i + 1
    }
}

export fun sliceFrom(arr: MutableArray a, start: Number): MutableArray a {
    _unsafe_coerce(arr).slice(start)
}

export fun sliceTo(arr: MutableArray a, end: Number): MutableArray a {
    _unsafe_coerce(arr).slice(0, end)
}

export fun slice(arr: MutableArray a, start: Number, end: Number): MutableArray a {
    _unsafe_coerce(arr).slice(start, end)
}

export fun freeze(arr: MutableArray a): array.Array a {
    _unsafe_coerce(arr).slice()
}
