export data CallbackQueue({
  mutable next: Number,
  entries: mutable [()],
})

export fun new() {
  return CallbackQueue({
    mutable next: 0,
    entries: mutable [],
  })
}

export fun add1<Env>(CallbackQueue(this), env: Env, cb: Env => ()) {
  this.entries->append(_unsafe_coerce(env))
  this.entries->append(_unsafe_coerce(cb))
}

fun run0(env) {
  env()
}

export fun add(cbset, cb) {
  add1(cbset, cb, run0)
}

export data ExceptionPolicy {
  RethrowAnyException,
  IgnoreExceptions,
/*
  RunAllAndRethrowFirstException,
*/
}

let defaultOptions = {
  exceptionPolicy: RethrowAnyException,
}

export fun runWithOptions(CallbackQueue(this), options) {
  match options.exceptionPolicy {
    RethrowAnyException => {
      let entries = this.entries
      let mutable i = this.next
      while i < len(entries) {
        let env = _unsafe_coerce(entries->get(i))
        let cb = _unsafe_coerce(entries->get(i + 1))
        i = i + 2
        this.next = i
        cb(env)
      }
      this.next = 0
      entries->clear()
    }
    IgnoreExceptions => {
      let entries = this.entries
      let mutable i = this.next
      while i < len(entries) {
        let env = _unsafe_coerce(entries->get(i))
        let cb = _unsafe_coerce(entries->get(i + 1))
        i = i + 2
        this.next = i
        try {
          cb(env)
        }
        catch _ {
        }
      }
      this.next = 0
      entries->clear()
    }
    /*
    RunAllAndRethrowFirstException => {

    }
    */
  }
}

export fun run(queue) {
  runWithOptions(queue, defaultOptions)
}

export fun clear(CallbackQueue(this)) {
  this.next = 0
  this.entries->clear()
}
