pragma { NoBuiltin }

import types(...)
import string(String, join)
import number(Number)
import cmp
import array(Array)
import mutarray(MutableArray)
import js.unsafe

export trait Repr {
    repr: self => String
}

impl Repr Boolean {
    repr(b) {
        match b {
            False => "False"
            True => "True"
        }
    }
}

impl Repr Number {
    repr = unsafe.toString
}

// TODO: add tuple sugar here
impl Repr Void {
    repr(_) { "()" }
}

impl Repr String {
    repr = _unsafe_js("_rts_show_string")
}

impl Repr cmp.Ordering {
    repr(ordering) {
        match ordering {
            cmp.LessThan => "LessThan"
            cmp.EqualTo => "Equal"
            cmp.GreaterThan => "GreaterThan"
        }
    }
}

impl Repr Array<elt: Repr> {
    repr(array) {
        "[" + join(", ", array->map(repr)) + "]"
    }
}

impl Repr MutableArray<elt: Repr> {
    repr(array) {
        "mutable [" + join(", ", array->freeze()->map(repr)) + "]"
    }
}
