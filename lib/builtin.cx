pragma { NoBuiltin }

// because the typechecker relies on certain modules being loaded, the
// sequence of imports matters here.
import {
    boolean,
    array,
    mutarray,
    string,
}

// TODO: implement support for export { ... } syntax
export type Boolean = boolean.Boolean
export let True = boolean.True
export let False = boolean.False
export let not = boolean.not

export fun print(a): () {
    _unsafe_js("console").log(a)
}

export let toString: (a) -> String =
    _unsafe_js("function toString(v) { return '' + v; }")

// Option

export data Option a {
    Some(a),
    None,
}

// Arrays have unspecified representation here. They are represented as JS arrays.
export type Array a = array.Array a

export fun emptyArray(): Array a {
    _unsafe_js("[]")
}

export let get = array.get
export let len = array.len
export let replicate = array.replicate
export let each = array.each

export fun map(f: (a) -> b, a: Array a): Array b {
    _unsafe_js("[].map").call(a, f)
}

export let sliceFrom = array.sliceFrom
export let sliceTo = array.sliceTo
export let slice = array.slice

// TODO: add comparator support
export fun sort(arr: Array String) {
    _unsafe_coerce(arr).sort()
}
