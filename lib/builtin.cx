pragma { NoBuiltin }

// because the typechecker relies on certain modules being loaded, the
// sequence of imports matters here.
import types
import cmp
import length
import boolean
import option
import result
import array
import mutarray
import string
import number
import tuple // TODO: this is not actually used, but it isn't codegenned in the right place if not imported here

export import types
export import cmp
export import length
export import boolean
export import option
export import result
export type Array = array.Array
export let replicate = array.replicate
export let each = array.each
export type String = string.String
export import number

export fun print(a): () {
    _unsafe_js("console").log(a)
}

export let toString<a>: a => String =
    _unsafe_js("function toString(v) { return '' + v; }")

// Arrays have unspecified representation here. They are represented as JS arrays.

export fun emptyArray<a>(): [a] {
    _unsafe_js("[]")
}

// TODO: implemented sorted with a trait so it can be used on mutarray too
export fun sorted<a: cmp.Ordered>(arr: [a]): [a] {
  return _unsafe_coerce(arr).slice().sort(fun(lhs: a, rhs: a) {
    if (lhs < rhs) {
      0 - 1 // TODO: https://github.com/cruxlang/crux/issues/170
    } else if (rhs < lhs) {
      1
    } else {
      0
    }
  })
}
