pragma { NoBuiltin }

// because the typechecker relies on certain modules being loaded, the
// sequence of imports matters here.
import {
    boolean,
    array,
    mutarray,
    string,
}

export import boolean

export fun print(a): () {
    _unsafe_js("console").log(a)
}

export let toString: (a) -> String =
    _unsafe_js("function toString(v) { return '' + v; }")

// Option

export data Option a {
    Some(a),
    None,
}

// Arrays have unspecified representation here. They are represented as JS arrays.
export type Array a = [a]

export fun emptyArray(): [a] {
    _unsafe_js("[]")
}

// TODO: implement support for export { ... } syntax
export let get = array.get
export let len = array.len
export let replicate = array.replicate
export let each = array.each

export fun map(f: (a) -> b, a: [a]): [b] {
    _unsafe_js("[].map").call(a, f)
}

export let sliceFrom = array.sliceFrom
export let sliceTo = array.sliceTo
export let slice = array.slice
