import js

data Error {
    Error(String)
}

export data JSONValue {}

let _typeOf: JSONValue => String = _unsafe_js("function (x) { return typeof x; }")
let _throw<a>: Error => a = _unsafe_js("function (e) { throw e; }")
let _isNull: JSONValue => Boolean = _unsafe_js("function (o) { return o === null; }")
let _getAttr<a>: (JSONValue, String) => a = _unsafe_js("function (o, k) { return o[k]; }")
let _parseJson: String => JSONValue = _unsafe_js("function (s) { return JSON.parse(s); }")

let _isArray = _unsafe_js("function (a) { return Array.isArray(a); }")

let _stringify = _unsafe_js("function (o) { return JSON.stringify(o); }")

fun assert(b: Boolean, error: String) {
    if not(b) {
        _throw(Error(error))
    }
}

fun assertTypeOf(a: JSONValue, expectedType: String) {
    let t = _typeOf(a);
    if expectedType != t {
        _throw(Error("Wanted " + expectedType + " but got " + t + ": " + _stringify(a)))
    }
}

export fun decodeNumber(a: JSONValue): Number {
    assertTypeOf(a, "number")
    return _unsafe_coerce(a)
}

export fun decodeBoolean(a: JSONValue): Boolean {
    assertTypeOf(a, "boolean")
    return _unsafe_coerce(a)
}

export fun decodeString(a: JSONValue): String {
    assertTypeOf(a, "string")
    return _unsafe_coerce(a)
}

export fun decodeNullable<a>(decoder: JSONValue => a): JSONValue => ?a {
    fun(a) {
        if (_isNull(a)) {
            return None
        } else {
            return Some(decoder(a))
        }
    }
}

export fun decodeArray<element>(
    elementDecoder: JSONValue => element
): JSONValue => [element] {
    fun (arr) {
        assert(_isArray(arr), "Expected array but got " + _stringify(arr))

        let result = mutable [];
        for element in _unsafe_coerce(arr) {
            result->append(elementDecoder(element))
        }
        result->freeze()
    }
}

export fun decodeKey<element>(
    keyDecoder: JSONValue => element,
    obj: JSONValue,
    key: String
): element {
    assertTypeOf(obj, "object")
    return keyDecoder(_getAttr(obj, key))
}

export fun fromString<a>(s: String, decoder: JSONValue => a): a {
    decoder(_parseJson(s))
}

// Encoder

// Crux needs tuples.
export data ObjectMember {
    ObjectMember(String, JSONValue)
}

let setProperty = _unsafe_js("function(o, k, v) { o[k] = v; }")

export fun encodeObject(members: [ObjectMember]): JSONValue {
    let v = _unsafe_js("{}")

    // TODO: need irrefutable pattern matches in iteration
    for member in members {
        match member {
            ObjectMember(key, value) => setProperty(v, key, value)
        }
    }

    return _unsafe_coerce(v)
}

export fun encodeArray(v: [JSONValue]): JSONValue {
    // we know that the crux representation of arrays lines up with javascript
    return _unsafe_coerce(v)
}

export fun encodeString(v: String): JSONValue {
    return _unsafe_coerce(v)
}

export let nullJSValue: JSONValue = _unsafe_js("null")

export fun encodeNullable<a>(encode: a => JSONValue, o: ?a): JSONValue {
    match o {
        None        => nullJSValue
        Some(value) => encode(value)
    }
}

fun encodeNumber(v: Number): JSONValue {
    return _unsafe_coerce(v)
}

fun encodeBoolean(v: Boolean): JSONValue {
    return _unsafe_coerce(v)
}


export let renderJSON: JSONValue => String = _unsafe_js("JSON.stringify")

export type Value = JSONValue

export trait ToJSON {
    toJSON: self => Value
}

impl ToJSON Array<a: ToJSON> {
    toJSON = array => _unsafe_coerce(array->map(toJSON))
}

impl ToJSON String {
    toJSON = str => _unsafe_coerce(str)
}

impl ToJSON js.Null {
    toJSON = _ => nullJSValue
}

export fun encode<V: ToJSON>(value: V): String {
    renderJSON(toJSON(value))
}
