pragma { NoBuiltin }

import {
  boolean(...)
}

export trait Eq {
  eq(self, self): Boolean
}

// TODO: move this into Eq and implement trait defaults
export fun neq(lhs, rhs) {
  not(lhs == rhs)
}

impl Eq Boolean {
  eq = _unsafe_js("function eq(x, y) { return x === y; }")
}

export trait Ordered {
  lt(self, self): Boolean
}

// TODO: move this into Eq and implement trait defaults
export fun gte(lhs, rhs) {
  not(lhs < rhs)
}

export fun lte(lhs, rhs) {
  lhs < rhs || lhs == rhs
}

export fun gt(lhs, rhs) {
  rhs < lhs && lhs != rhs
}

// TODO: Ord impl for Boolean

export fun min(lhs, rhs) {
  if lhs < rhs then lhs else rhs
}

export fun max(lhs, rhs) {
  if rhs < lhs then lhs else rhs
}

export data jsffi Ordering {
  LessThan = "negative-one-todo", // TODO: support negative numeric literals
  EqualTo = 0,
  GreaterThan = 1,
}

impl Eq Ordering {
  eq = _unsafe_js("function eq(lhs, rhs) { return lhs === rhs; }")
}

// TODO: move compare into the Eq constraint and implement trait defaults

export fun compare(lhs, rhs) {
  if lhs < rhs then
    LessThan
  else if rhs < lhs then
    GreaterThan
  else
    EqualTo
}
