data DispatchToken(Number)

export data Dispatcher<action>({
  mutable currentToken: Number,
  mutable callbacks: mutable [(DispatchToken, fun(action) -> ())],
})

export fun new() {
  Dispatcher({
    mutable currentToken: 0,
    mutable callbacks: mutable [],
  })
}

export fun register(Dispatcher(self), callback): DispatchToken {
  self.currentToken = self.currentToken + 1
  let token = DispatchToken(self.currentToken)
  self.callbacks->append((token, callback))
  return token
}

export fun unregister(Dispatcher(self), DispatchToken(token)) {
  // TODO: this has linear complexity
  // TODO(crux): add support for ((token2, cb)) => ... syntax
  self.callbacks = self.callbacks->filter(fun((DispatchToken(token2), cb)) {
    return token != token2
  })
}

export fun dispatch(Dispatcher(self), action) {
  // TODO(crux): support arbitrary patterns in for loops
  for cb in self.callbacks->freeze() {
    let (_, cb2) = cb
    cb2(action)
  }
}
