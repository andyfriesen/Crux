data jsffi ReadyState {
    Unsent = 0,
    Opened = 1,
    HeadersReceived = 2,
    Loading = 3,
    Done = 4,
}

data jsffi Method {
    Get = "GET",
    Post = "POST",
    Put = "PUT",
    Delete = "DELETE",
}

type Url = String
type EventName = String
type EventHandler = () -> ()

type XMLHttpRequest = {
    send: () -> (),
    abort: () -> (),
    open: (Method, Url) -> (),
    addEventListener: (EventName, EventHandler) -> (),
    setRequestHeader: (String, String) -> (),
    responseText: String,
    //getRequestHeader: (String) -> Unityped,
}

data XHR { XHR(XMLHttpRequest) }

export fun newXhr() {
    let result: XMLHttpRequest = _unsafe_js("new XMLHttpRequest")
    XHR(result)
}

fun i(x: XMLHttpRequest, url: String, onLoaded): () {
    let loadProc = fun() {
        onLoaded(x)
    }

    x.addEventListener("load", loadProc)
    x.open(Get, url)
    x.send()
}

export fun http_get(xhr: XHR, url: String, onLoaded): () {
    match xhr {
        XHR(x) => i(x, url, onLoaded);
    }
}
